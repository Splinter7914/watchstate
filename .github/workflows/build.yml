name: Building

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug
      build:
        description: "Build"
        required: false
        default: false
        type: boolean
      update_readme:
        description: "Update Readme"
        required: false
        default: false
        type: boolean

  push:
    branches:
      - master
      - dev
    tags:
      - "v*"
    paths-ignore:
      - "**.md"
      - ".github/**"

  pull_request:
    branches:
      - "master"
    paths-ignore:
      - "**.md"
      - ".github/**"

env:
  DOCKERHUB_SLUG: arabcoders/watchstate
  GHCR_SLUG: ghcr.io/arabcoders/watchstate
  PLATFORMS: linux/amd64,linux/arm64
  PNPM_VERSION: 10
  NODE_VERSION: 20

jobs:
  unit-tests:
    name: PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        php: [ 8.4 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Version File
        uses: arabcoders/write-version-to-file@master
        with:
          filename: "/config/config.php"
          placeholder: "$(version_via_ci)"
          with_date: "true"
          with_branch: "true"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: pdo, mbstring, ctype, curl, sqlite3
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-files-dir)" >> "$GITHUB_OUTPUT"

      - name: restore cached dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.COMPOSER_CACHE_DIR }}
          key: "${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}"
          restore-keys: ${{ matrix.php }}-composer-

      - run: composer install --prefer-dist --no-interaction --no-progress
      - run: composer run test

  pr_build_test:
    needs: unit-tests
    if: github.event_name == 'pull_request'
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install frontend dependencies & Build
        working-directory: frontend
        run: |
          pnpm install --production --prefer-offline --frozen-lockfile
          pnpm run generate

      - name: Update Version File
        uses: arabcoders/write-version-to-file@master
        with:
          filename: "/config/config.php"
          placeholder: "$(version_via_ci)"
          with_date: "true"
          with_branch: "true"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ env.PLATFORMS }}
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha, scope=pr_${{ github.workflow }}
          cache-to: type=gha, scope=pr_${{ github.workflow }}

  publish_docker_images:
    needs: unit-tests
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build == 'true')
    runs-on: "ubuntu-latest"
    permissions:
      packages: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install frontend dependencies & Build
        working-directory: frontend
        run: |
          pnpm install --production --prefer-offline --frozen-lockfile
          pnpm run generate

      - name: Install GitPython
        run: pip install gitpython

      - name: Generate CHANGELOG.json
        run: |
          python3 .github/scripts/generate_changelog.py -p . -f ./frontend/exported/CHANGELOG.json

      - name: Update config/config.php
        run: |
          VERSION="${GITHUB_REF##*/}"
          SHA=$(git rev-parse HEAD)
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          DATE=$(date -u +"%Y%m%d")

          echo "Current version: ${VERSION}, SHA: ${SHA}, Date: ${DATE}"

          echo "APP_VERSION=${VERSION}"  >> "$GITHUB_ENV"
          echo "APP_SHA=${SHA}"          >> "$GITHUB_ENV"
          echo "APP_DATE=${DATE}"        >> "$GITHUB_ENV"
            echo "APP_BRANCH=${BRANCH}"    >> "$GITHUB_ENV"

          sed -i \
          -e "s/'version' => 'dev-master'/'version' => '${VERSION}'/" \
          -e "s/'version_sha' => 'unknown'/'version_sha' => '${SHA}'/" \
          -e "s/'version_build' => 'unknown'/'version_build' => '${DATE}'/" \
          -e "s/'version_branch' => 'unknown'/'version_branch' => '${BRANCH}'/" \
          config/config.php

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
            ${{ env.GHCR_SLUG }}
          tags: |
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=ref,event=branch
            type=ref,event=tag
          flavor: |
            latest=false

      - name: Login to github
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ env.PLATFORMS }}
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: Overwrite GitHub release notes
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = context.ref.replace('refs/tags/', '');

            const latestRelease = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const release = latestRelease.data.find(r => r.tag_name === tag);
            if (!release) {
              core.setFailed(`Release with tag ${tag} not found`);
              return;
            }

            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: latestRelease.data[1]?.tag_name || '', // fallback to second latest tag
              head: tag,
            });

            const changelog = commits.commits.map(
              c => `- ${c.sha.substring(0, 7)} ${c.commit.message.split('\n')[0]} by ${c.commit.author.name}`
            ).join('\n');

            if (!changelog) {
              core.setFailed('No commits found for the changelog');
              return;
            }

            console.log(`Changelog for ${tag}:\n${changelog}`);

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: changelog
            });

  dockerhub-sync-readme:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.update_readme == 'true')
    permissions:
      contents: read
    steps:
      - name: Sync README
        uses: docker://lsiodev/readme-sync:latest
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          GIT_REPOSITORY: ${{ github.repository }}
          DOCKER_REPOSITORY: ${{ env.DOCKERHUB_SLUG }}
          GIT_BRANCH: ${{ github.event.repository.default_branch }}
        with:
          entrypoint: node
          args: /opt/docker-readme-sync/sync
