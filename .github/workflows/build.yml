name: Building

on:
  # Manual trigger remains available for any branch
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug

  # Only run automatically on pushes to 'master'
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
      - '.github/**'

  # Only run automatically for PRs targeting 'master'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'

env:
  DOCKERHUB_SLUG: arabcoders/watchstate
  GHCR_SLUG: ghcr.io/arabcoders/watchstate
  PLATFORMS: linux/amd64,linux/arm64,linux/arm

jobs:
  unit-tests:
    name: PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        php: [ 8.4 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Version File
        uses: arabcoders/write-version-to-file@master
        with:
          filename: '/config/config.php'
          placeholder: '$(version_via_ci)'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: pdo, mbstring, ctype, curl, sqlite3
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-files-dir)" >> "$GITHUB_OUTPUT"

      - name: restore cached dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.COMPOSER_CACHE_DIR }}
          key: "${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}"
          restore-keys: ${{ matrix.php }}-composer-

      - run: composer install --prefer-dist --no-interaction --no-progress
      - run: composer run test

  publish_docker_images:
    needs: unit-tests
    # This ensures it won't run on pull_request events
    if: github.event_name == 'push'
    runs-on: "ubuntu-latest"
    permissions:
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: bahmutov/npm-install@v1
        with:
          working-directory: frontend
          install-command: yarn --production --prefer-offline --frozen-lockfile

      - uses: bahmutov/npm-install@v1
        with:
          working-directory: frontend
          install-command: yarn run generate

      - name: Update Version File
        uses: arabcoders/write-version-to-file@master
        with:
          filename: '/config/config.php'
          placeholder: '$(version_via_ci)'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
            ${{ env.GHCR_SLUG }}
          tags: |
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value={{branch}}{{base_ref}}-{{date 'YYYYMMDD'}}-{{sha}}
          flavor: |
            latest=false

      - name: Login to github
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ env.PLATFORMS }}
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

  dockerhub-sync-readme:
    needs: publish_docker_images
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Sync README
        uses: docker://lsiodev/readme-sync:latest
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          GIT_REPOSITORY: ${{ github.repository }}
          DOCKER_REPOSITORY: ${{ env.DOCKERHUB_SLUG }}
          GIT_BRANCH: master
        with:
          entrypoint: node
          args: /opt/docker-readme-sync/sync

  create_release:
    needs: [ publish_docker_images ]
    runs-on: ubuntu-latest
    # Only run for push events on master
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # so we can git log the full history

      - name: Get commits between old and new
        id: commits
        run: |
          PREVIOUS_SHA="${{ github.event.before }}"
          CURRENT_SHA="${{ github.event.after }}"

          echo "Previous SHA: $PREVIOUS_SHA"
          echo "Current  SHA: $CURRENT_SHA"

          # If "before" is empty or all zeros, log all commits
          if [ -z "$PREVIOUS_SHA" ] || [ "$PREVIOUS_SHA" = "0000000000000000000000000000000000000000" ]; then
            LOG=$(git log --pretty=format:"- %h %s by %an")
          else
            LOG=$(git log "$PREVIOUS_SHA".."$CURRENT_SHA" --pretty=format:"- %h %s by %an")
          fi

          echo "LOG<<EOF" >> "$GITHUB_ENV"
          echo "$LOG" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"

      - name: Create local tag matching Docker's raw pattern
        id: createtag
        run: |
          # We'll replicate raw format: branch + base_ref + date + short sha
          # If base_ref is empty (normal push to master, no PR?), it won't appear.
          BRANCH_NAME="${{ github.ref_name }}"
          BASE_REF="${{ github.base_ref }}"
          CURRENT_SHA="${{ github.event.after }}"
          DATE=$(date +%Y%m%d)
          SHORT_SHA=$(echo "$CURRENT_SHA" | cut -c1-7)

          TAG="${BRANCH_NAME}${BASE_REF}-${DATE}-${SHORT_SHA}"

          echo "Using tag: $TAG"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Create a lightweight local tag
          git tag "$TAG" "$CURRENT_SHA"

          # Push the tag back to GitHub
          git push origin "$TAG"

          # Expose as an output
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.createtag.outputs.TAG }}
          name: "${{ steps.createtag.outputs.TAG }}"
          body: ${{ env.LOG }}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
